require 'test_helper'

class VulnerabilityScanResultsControllerTest < ActionDispatch::IntegrationTest
  setup do
    @vulnerability_scan_result = vulnerability_scan_results(:one)
  end

  test "should get index" do
    get vulnerability_scan_results_url
    assert_response :success
  end

  test "should get new" do
    get new_vulnerability_scan_result_url
    assert_response :success
  end

  test "should create vulnerability_scan_result" do
    assert_difference('VulnerabilityScanResult.count') do
      post vulnerability_scan_results_url, params: { vulnerability_scan_result: { description: @vulnerability_scan_result.description, device_id: @vulnerability_scan_result.device_id, scanned_at: @vulnerability_scan_result.scanned_at, threat_level: @vulnerability_scan_result.threat_level } }
    end

    assert_redirected_to vulnerability_scan_result_url(VulnerabilityScanResult.last)
  end

  test "should show vulnerability_scan_result" do
    get vulnerability_scan_result_url(@vulnerability_scan_result)
    assert_response :success
  end

  test "should get edit" do
    get edit_vulnerability_scan_result_url(@vulnerability_scan_result)
    assert_response :success
  end

  test "should update vulnerability_scan_result" do
    patch vulnerability_scan_result_url(@vulnerability_scan_result), params: { vulnerability_scan_result: { description: @vulnerability_scan_result.description, device_id: @vulnerability_scan_result.device_id, scanned_at: @vulnerability_scan_result.scanned_at, threat_level: @vulnerability_scan_result.threat_level } }
    assert_redirected_to vulnerability_scan_result_url(@vulnerability_scan_result)
  end

  test "should destroy vulnerability_scan_result" do
    assert_difference('VulnerabilityScanResult.count', -1) do
      delete vulnerability_scan_result_url(@vulnerability_scan_result)
    end

    assert_redirected_to vulnerability_scan_results_url
  end
end
